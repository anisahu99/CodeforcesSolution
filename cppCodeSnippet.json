{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"cpp-snippet": {
  "prefix": "qa",
  "body": [
    "# include<bits/stdc++.h>",
    "using namespace std;",
    "",
    "#define endl \"\\n\"",
    "#define odd(n) (n&1)",
    "#define even(n) !(n&1)",
    "",
    "",
    "int main(){",
    "    ios_base::sync_with_stdio(false);",
    "    cin.tie(NULL);",
    "    cout.tie(NULL);",
    "",
    "",
    "    return 0;",
    "}"
  ],
  "description": "cpp-snippet"
},
"": {
  "prefix": "qw",
  "body": [
    "# include<bits/stdc++.h>",
    "using namespace std;",
    "",
    "#define endl \"\\n\"",
    "#define odd(n) (n&1)",
    "#define even(n) !(n&1)",
    "",
    "int minimum_number_of_operations(const vector<int> &a, const int &n){",
    "    ",
    "}",
    "",
    "int main(){",
    "    ios_base::sync_with_stdio(false);",
    "    cin.tie(NULL);",
    "    cout.tie(NULL);",
    "    int t;",
    "    cin>>t;",
    "    while(t--){",
    "        int n;",
    "        cin>>n;",
    "        vector<int> a(n);",
    "        for(int i=0;i<n;++i) cin>>a[i];",
    "        cout<<minimum_number_of_operations( a, n )<<endl;",
    "    }",
    "",
    "    return 0;",
    "}"
  ],
  "description": ""
},

"findPrimeNumber": {
  "prefix": "primeNumber",
  "body": [
    "bool isPrimeNumber( const int &n ){",
    "    vector<int> isPrimeNumber(n+1,1);",
    "    // 0 and 1 is not Prime",
    "    isPrimeNumber[0] = isPrimeNumber[1] = 0;",
    "",
    "    for( int num = 2; num*num<=n; num++ ){",
    "        // if num is not Prime it means it is already divide by someone and its ",
    "        // also divide by same multiple",
    "        // so we do not need to finds its multiple again",
    "        if( !isPrimeNumber[num] ) continue;",
    "",
    "        for( int multiple_of_num = num*num; multiple_of_num<=n; multiple_of_num +=num){",
    "            isPrimeNumber[ multiple_of_num ] = 0;",
    "        }",
    "    }",
    "    return (bool) isPrimeNumber[n];",
    "}"
  ],
  "description": "findPrimeNumber"
}

}
